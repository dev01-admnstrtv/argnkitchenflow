const { createClient } = require('@supabase/supabase-js')
const fs = require('fs')
const path = require('path')

// Configura√ß√£o do Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Vari√°veis de ambiente do Supabase n√£o configuradas')
  console.log('Configure NEXT_PUBLIC_SUPABASE_URL e SUPABASE_SERVICE_ROLE_KEY')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function applyMigrations() {
  console.log('üîÑ Aplicando migrations...')
  
  try {
    // Ler e aplicar migration de separa√ß√£o granular
    const migrationPath = path.join(__dirname, 'supabase', 'migrations', '20240101000004_separacao_granular.sql')
    const fixMigrationPath = path.join(__dirname, 'supabase', 'migrations', '20240101000005_fix_separacao_data.sql')
    
    if (fs.existsSync(migrationPath)) {
      console.log('üìÑ Aplicando migration de separa√ß√£o granular...')
      const migrationSQL = fs.readFileSync(migrationPath, 'utf8')
      
      const { error: migrationError } = await supabase.rpc('exec_sql', {
        sql: migrationSQL
      })
      
      if (migrationError) {
        console.warn('‚ö†Ô∏è  Aviso na migration principal:', migrationError.message)
      } else {
        console.log('‚úÖ Migration principal aplicada com sucesso')
      }
    }
    
    if (fs.existsSync(fixMigrationPath)) {
      console.log('üîß Aplicando corre√ß√µes de dados...')
      const fixSQL = fs.readFileSync(fixMigrationPath, 'utf8')
      
      const { error: fixError } = await supabase.rpc('exec_sql', {
        sql: fixSQL
      })
      
      if (fixError) {
        console.warn('‚ö†Ô∏è  Aviso na corre√ß√£o:', fixError.message)
      } else {
        console.log('‚úÖ Corre√ß√µes aplicadas com sucesso')
      }
    }
    
    // Verificar se as views foram criadas
    console.log('üîç Verificando views...')
    
    const { data: viewData, error: viewError } = await supabase
      .from('vw_separacao_dashboard')
      .select('*')
      .limit(1)
    
    if (viewError) {
      console.error('‚ùå Erro ao verificar view:', viewError.message)
    } else {
      console.log('‚úÖ View vw_separacao_dashboard funcionando')
    }
    
    // Testar busca de solicita√ß√µes
    console.log('üîç Testando busca de solicita√ß√µes...')
    
    const { data: solicitacoes, error: solicitacoesError } = await supabase
      .from('solicitacoes')
      .select('*')
      .eq('status', 'pendente')
    
    if (solicitacoesError) {
      console.error('‚ùå Erro ao buscar solicita√ß√µes:', solicitacoesError.message)
    } else {
      console.log(`‚úÖ Encontradas ${solicitacoes.length} solicita√ß√µes pendentes`)
    }
    
    console.log('üéâ Migrations aplicadas com sucesso!')
    
  } catch (error) {
    console.error('‚ùå Erro ao aplicar migrations:', error)
    process.exit(1)
  }
}

applyMigrations()